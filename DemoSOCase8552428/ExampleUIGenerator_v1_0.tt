<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".designer.cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Serialization" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="..\..\abscommon\CommonInclude\Common\CommonCodeblocks.ttinclude" #>
<#@ include file="ImportXml.ttinclude" #>
<#   
	// Set abstraction specific type and single file specific extension
	TransformGenerator< GeneratedSolutionType >(GenerateRoot, ".designer.cs");	
#>
<#+ 
	void SetCurrentAbstraction(object abs)
	{
		CurrentAbstraction = ( GeneratedSolutionType ) abs;
	}
	
	GeneratedSolutionType CurrentAbstraction;
	
	void GenerateRoot()
	{
		GenerateAbstraction(CurrentAbstraction);
	}
	
	void GenerateAbstraction(GeneratedSolutionType abstraction)
	{
		#>
		// This should be C# or something else (change the extension definitions...)
		// For solution called: <#= abstraction.Name #>
		<#+
		foreach(var genProject in abstraction.GeneratedProject ?? new GeneratedProjectType[0])
			GenerateProject(genProject);
	}	
	
	void GenerateProject(GeneratedProjectType project)
	{
		#>
		
		// Here starts project stuff for the project
		// This is project stuff for project <#= project.Name #>
		
		<#+
	}
#>